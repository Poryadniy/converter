import zipfile
import re
import os
import shutil
import time


def find_all_tickers(root_directory):
    """–ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ —Ç–∏–∫–µ—Ä—ã –∏–∑ –∏–º–µ–Ω CSV —Ñ–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–∞—Ö"""
    pattern = r'^([^\d]+)(?=\d)'  # –í—Å–µ —á—Ç–æ –¥–æ –ø–µ—Ä–≤–æ–π —Ü–∏—Ñ—Ä—ã –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
    all_tickers = set()
    archive_count = 0
    csv_count = 0

    print("üîç –ü–æ–∏—Å–∫ —Ç–∏–∫–µ—Ä–æ–≤ –≤ –∞—Ä—Ö–∏–≤–∞—Ö...")
    start_time = time.time()

    for root, dirs, files in os.walk(root_directory):
        for file in files:
            if file.endswith('.zip'):
                archive_count += 1
                try:
                    with zipfile.ZipFile(os.path.join(root, file), 'r') as zip_ref:
                        for zip_file in zip_ref.namelist():
                            if zip_file.endswith('.csv'):
                                csv_count += 1
                                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ –∏–º—è —Ñ–∞–π–ª–∞ –±–µ–∑ –ø—É—Ç–∏
                                filename = os.path.basename(zip_file)
                                match = re.match(pattern, filename)
                                if match:
                                    ticker = match.group(1).strip()
                                    if ticker:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
                                        all_tickers.add(ticker)
                except Exception as e:
                    print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –∞—Ä—Ö–∏–≤–∞ {file}: {e}")
                    continue

    end_time = time.time()
    print(f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∞—Ä—Ö–∏–≤–æ–≤: {archive_count}, CSV —Ñ–∞–π–ª–æ–≤: {csv_count}")
    print(f"‚è±Ô∏è  –í—Ä–µ–º—è –ø–æ–∏—Å–∫–∞: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")

    return sorted(list(all_tickers))


def extract_and_organize_sequential(root_directory, output_directory, tickers_list):
    """–†–∞–∑–∞—Ä—Ö–∏–≤–∏—Ä—É–µ—Ç –∏ –æ—Ä–≥–∞–Ω–∏–∑—É–µ—Ç —Ñ–∞–π–ª—ã –ø–æ —Ç–∏–∫–µ—Ä–∞–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ"""
    print("\nüì¶ –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∞—Ä—Ö–∏–≤–æ–≤...")
    start_time = time.time()

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ç–∏–∫–µ—Ä–æ–≤
    print("üìÅ –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫...")
    for ticker in tickers_list:
        os.makedirs(os.path.join(output_directory, ticker, 'DAY'), exist_ok=True)
        os.makedirs(os.path.join(output_directory, ticker, 'NIGHT'), exist_ok=True)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–∞–ø–æ–∫ –¥–ª—è {len(tickers_list)} —Ç–∏–∫–µ—Ä–æ–≤")

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –∞—Ä—Ö–∏–≤—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    archive_list = []
    for root, dirs, files in os.walk(root_directory):
        for file in files:
            if file.endswith('.zip'):
                archive_list.append((root, file))

    print(f"üì¶ –ù–∞–π–¥–µ–Ω–æ –∞—Ä—Ö–∏–≤–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(archive_list)}")

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
    total_processed_files = 0
    successful_archives = 0
    failed_archives = 0

    for i, (root, file) in enumerate(archive_list, 1):
        print(f"üîπ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä—Ö–∏–≤ {i}/{len(archive_list)}: {file}")

        try:
            with zipfile.ZipFile(os.path.join(root, file), 'r') as zip_ref:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º
                temp_dir = os.path.join(root, f'temp_extract_{i}')
                if os.path.exists(temp_dir):
                    shutil.rmtree(temp_dir)

                zip_ref.extractall(temp_dir)

                archive_processed = 0
                for extract_root, _, extract_files in os.walk(temp_dir):
                    for csv_file in extract_files:
                        if csv_file.endswith('.csv'):
                            csv_path = os.path.join(extract_root, csv_file)
                            filename = os.path.basename(csv_file)

                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–∫–µ—Ä –∏–∑ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
                            match = re.match(r'^([^\d]+)(?=\d)', filename)
                            if match:
                                file_ticker = match.group(1).strip()
                                if file_ticker in tickers_list:
                                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º DAY/NIGHT
                                    data_type = 'NIGHT' if 'NIGHT' in extract_root.upper() else 'DAY'
                                    dest_dir = os.path.join(output_directory, file_ticker, data_type)
                                    os.makedirs(dest_dir, exist_ok=True)

                                    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª
                                    shutil.copy2(csv_path, os.path.join(dest_dir, csv_file))
                                    archive_processed += 1
                                    total_processed_files += 1

                # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                shutil.rmtree(temp_dir)

                successful_archives += 1
                print(f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {file} (—Ñ–∞–π–ª–æ–≤: {archive_processed})")

                # –í—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∞—Ä—Ö–∏–≤–æ–≤
                if i % 10 == 0 or i == len(archive_list):
                    print(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(archive_list)} –∞—Ä—Ö–∏–≤–æ–≤ | –§–∞–π–ª–æ–≤: {total_processed_files}")

        except Exception as e:
            failed_archives += 1
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –≤ –∞—Ä—Ö–∏–≤–µ {file}: {e}")

            # –£–±–µ–¥–∏–º—Å—è —á—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞
            temp_dir = os.path.join(root, f'temp_extract_{i}')
            if os.path.exists(temp_dir):
                try:
                    shutil.rmtree(temp_dir)
                except:
                    pass

    end_time = time.time()
    print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üì¶ –£—Å–ø–µ—à–Ω—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤: {successful_archives}")
    print(f"‚ùå –ù–µ—É–¥–∞—á–Ω—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤: {failed_archives}")
    print(f"üìÑ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ CSV —Ñ–∞–π–ª–æ–≤: {total_processed_files}")
    print(f"‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")

    return total_processed_files


'''def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ç–∏–∫–µ—Ä–∞–º")
    print("=" * 50)

    root_directory = "D:\\Data\\Unarchived"
    output_directory = "D:\\Data\\TickersData"

    if not os.path.exists(root_directory):
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return

    print("=" * 50)

    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ç–∏–∫–µ—Ä—ã
    tickers = find_all_tickers(root_directory)

    print("=" * 50)
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∏–∫–µ—Ä–æ–≤: {len(tickers)}")
    print("üìã –°–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤:")
    for i, ticker in enumerate(tickers, 1):
        print(f"{i:3d}. {ticker}")

    if tickers:
        print("=" * 50)
        # –û—Ä–≥–∞–Ω–∏–∑—É–µ–º —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ
        extract_and_organize_sequential(root_directory, output_directory, tickers)
    else:
        print("‚ùå –¢–∏–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")


if __name__ == "__main__":
    main()'''